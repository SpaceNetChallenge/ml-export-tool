import os
import argparse
from ml_export import tile_generator, tile_aggregator
from ml_export.ml_tools.mlbase import ml_tf_serving
from ml_export.tile_class_generator import TileClassDataset as TDC
from ml_export import postprocessing as postproc
from ml_export import utils
# Load All Presets
access_token = os.getenv('MAPBOX_ACCESS_TOKEN')
raster_tile_server_template = "https://a.tiles.mapbox.com/v4/mapbox.satellite/{z}/{x}/{y}.jpg?access_token=" + access_token
api_location = 'http://localhost:8501/v1/models/looking_glass_export:predict'
mltf_obj = ml_tf_serving(api_location=api_location, output_num_channels=1)
default_bucket = "s3://spacenet-dataset"
small_tile_zoom_default = 18
super_res_tile_zoom_default     = 18

# Process Tile into Inference

def main():
    parser = argparse.ArgumentParser(description='Process Tile for Building Content')
    parser.add_argument('taskid', type=int,
                        help="TaskID to assign tile process to.  This id is generated by HOT Tasking Manager")
    parser.add_argument("--algorithm", type=str,
                        choices=['lookingglass', 'ternaus']
                        )
    parser.add_argument('--summary_zoom_tile', type=str,
                        help="Summary Zoom Tile Level")

    parser.add_argument("--geom", type=str,
                        help="Polygon in WKT Format for analysis of image")

    args = parser.parse_args()
    args_dict = vars(args)
    args_dict['summary_zoom_tile']


    large_tile_object_list = tile_generator.get_tile_list(geom, zoom=args_dict['summary_zoom_tile'])
    print("{} z{} Tiles identified".format(len(large_tile_object_list), args_dict['summary_zoom_tile']))

    file_name = ""

    for large_tile_object in large_tile_object_list:

        file_name = "Taskid{taskid}_{algo}_{zoom}_{x}_{y}.tif".format(taskid=args_dict["taskid"],
                                                                  algo="lookingglass",
                                                                  zoom=large_tile_object.z,
                                                                  x=large_tile_object.x,
                                                                  y=large_tile_object.y)
        key_path = "Taskid{taskid}/{algo}/".format(taskid=args_dict["taskid"],
                                                                  algo="lookingglass")

        tile_aggregator.build_cog_from_tiles_gen(file_name,
                                                 large_tile_object,
                                                 raster_tile_server_template,
                                                 desired_small_tile_zoom_level=small_tile_zoom_default,
                                                 desired_super_res_tile_zoom_level=super_res_tile_zoom_default,
                                                 cog=False,
                                                 indexes=None,
                                                 tile_size=256,
                                                 batch_size=5,
                                                 num_workers=4,
                                                 tile_dataset_class=TDC,
                                                 detection_module=mltf_obj
                                                 )

        geojson_name =  file_name.replace('.tif', '.geojson')
        postproc.create_geojson(file_name, geojson_name)

        utils.upload_to_s3(file_name, bucket_name=default_bucket,
                           key=os.path.join(key_path, file_name))
        utils.upload_to_s3(file_name, bucket_name=default_bucket,
                           key=os.path.join(key_path, geojson_name))



        print(os.path.join(key_path, file_name))







if __name__ == "__main__":
    main()

# Upload Inference to s3

# Update StacItem

# Update StacDataset

# Update StacCatalog
